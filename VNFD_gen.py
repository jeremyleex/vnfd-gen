#generating VNFD package - version 1.0
#by jeremy.li@ericsson.com

import xml.etree.ElementTree as ET
from zipfile import ZipFile 
from tarfile import TarFile
import os.path
from os import mkdir,rmdir,remove,walk
from hashlib import sha256
import tkinter as tk
from tkinter import filedialog,messagebox,Frame,StringVar,IntVar,Entry,Button,mainloop
import tkinter.font as tf
#
#│<vnf_id>.zip          //target package generated by this tool
#│   ├── ExtCP.yaml         //ext connection point, you can choose to auto-generate based on config.xml or load an existed one
#│   ├── <vnf_id>.mf        //mainfest file
#│   ├── TOSCA-Metadata
#│   │   └── Tosca.meta         //tosca metadata
#│   └── VNFD
#│       └── <vnf_id>.tar
#│           └── <vnf_id> 
#│               ├── config.xml     //prepare before load into the tool
#│               └── <vnf_id>.zip      
#│                   ├── Resources      //from hot package, some files need to be modfied before load
#│                   │   ├── VnfdWrapperFiles
#│                   │   │   └── VNFD_Wrapper_<vnf_type>.json       //need modify before loading
#│                   │   ├── EnvironmentFiles
#│                   │   │   └── <vnf_evn>.yaml        //need modify before loading
#│                   │   ├── HotFiles 
#│                   │   │   └── <xxx hot>.yaml
#│                   │   └── UserConfigurationFiles
#│                   │       └── <xxx configuration>.sh         //better modify before use
#│                   └── <vnf_hot>.yaml         //better modify before use

vnf_id = ''
vnf_type = ''
config_xml = ''
hot_yaml = ''
res_dir = ''
extcp_yaml = ''
nets = []
#VNFD(tar config.xml hot-package:resources and yaml)
def VNFD():
    os.mkdir('VNFD/')
    files = [('dir',res_dir),('file',hot_yaml)]
    zip_file_name = vnf_id+'.zip'
    zip_file(zip_file_name,files)
    with TarFile.open('VNFD/'+vnf_id+'.tar', 'w') as tf:
        for file in [config_xml,zip_file_name]:
            tf.add(file,vnf_id+'/'+os.path.basename(file))

def get_config(file):
    global nets
    tree = ET.parse(file)
    root = tree.getroot()
    for net in root.iter('netid'):
        nets.append(net.text)
#TOSCA metadata
def tosca_meta():
    os.mkdir('TOSCA-Metadata')
    with open('TOSCA-Metadata/Tosca.meta','w') as f:
        f.write(
            'TOSCA-Meta-File-Version: 1.0\n'
            'CSAR-Version: 1.1\n'
            'Created-by: Ericsson\n'
            'Entry-Definitions: VNFD/'+vnf_id+'.tar\n\n'
            'Name: TOSCA-Metadata/Tosca.meta\nContent-Type: metadata\n\n'
            'Name: '+vnf_id+'.mf\nContent-Type: manifest\n\n'
            'Name: VNFD/'+vnf_id+'.tar\nContent-Type: VNFD\n\n'
            'Name: ExtCP.yaml\nContent-Type: ExtCP')
#ExtCP.yaml based on config.xml
def ExtCP_yaml(nets):
    with open(extcp_yaml,'w') as f:
        for netid in nets:
            f.write(
                netid+'_cp:\n'
                '   type: VNFD.net.ConnectionPoint\n'
                '   properties:\n'
                '     ExtCp_ref: '+netid+'\n'
                '     network_type: vxlan\n'
                '     need_l3_connectivity:  true\n'
                '     trunk_connectivity:  false\n')
#mainfest
def mainfest():
    content = (
        'metadata:\n'
        'vnf_product_name: '+vnf_type+'\n'
        'vnf_provider_id: Ericsson\n'
        'vnf_package_version: 1.32\n'
        'vnf_release_data_time: 2019-10-21T11:00+08:00\n'
        'vnf_type: '+vnf_type+'\n'
        'vnf_description: This is a '+vnf_type+' package.\n'
        )
    #hash
    files = ['TOSCA-Metadata/Tosca.meta',extcp_yaml,'VNFD/'+vnf_id+'.tar']
    for file in files:
        hash_value = sha256()
        content += '\nSource: {0}\n'.format(file)
        content += "Algorithm: SHA-256\n"
        with open(file,'rb') as f:
            for data in iter(lambda: f.read(131072), b""):
                hash_value.update(data)
        hash_value = hash_value.hexdigest()
        content += "Hash: {0}\n".format(hash_value)
    with open(vnf_id+'.mf','w') as f:
        f.write(''.join(content))
#zip 
def zip_file(fd,files):
    with ZipFile(fd, 'w', allowZip64=True) as zf:
        for ftype, file in files:
            if ftype == 'dir':
                ppath = os.path.dirname(file)
                for path,dirnames,filenames in os.walk(file):
                    #print(file,path,ppath)
                    fpath = path.replace(ppath+'/', '')
                    for filename in filenames:
                        zf.write(os.path.join(path,filename),os.path.join(fpath,filename))
            else:               
                zf.write(file,os.path.basename(file))
#GUI
def load_hot_yaml():
    global hot_yaml
    hot_yaml = tk.filedialog.askopenfilename(title='load hot yaml file', filetypes=[('hot yaml', '*.yaml'), ('All Files', '*')])
def load_config_xml():
    global config_xml
    config_xml = tk.filedialog.askopenfilename(title='load config xml file',filetypes=[('config xml', '*.xml'), ('All Files', '*')])
def load_res_dir():
    global res_dir
    res_dir = tk.filedialog.askdirectory(title='load resouces files dir')
def load_ExtCP_yaml():
    global extcp_yaml
    if ck_value1.get():
        cbt1.toggle()
        extcp_yaml = tk.filedialog.askopenfilename(title='load extcp yaml file',filetypes=[('extcp yaml', '*.yaml'), ('All Files', '*')])
    else:
        pass
def pkg_gen():
    global vnf_id
    global vnf_type
    global extcp_yaml
    vnf_id = e_id.get()
    vnf_type = e_type.get()
    #add files
    tosca_meta()
    if ck_value1.get():
        extcp_yaml = 'ExtCP.yaml'
        get_config(config_xml)
        ExtCP_yaml(nets)
    else:
        print('pass')
    VNFD()
    mainfest()
    files = [('dir','VNFD'),('file',extcp_yaml),('dir','TOSCA-Metadata'),('file',vnf_id+'.mf')]
    #print(hot_yaml,config_xml,res_dir)
    zip_file(vnf_id+'.zip',files)
    #clean
    for file in ['TOSCA-Metadata/Tosca.meta','ExtCP.yaml','VNFD/'+vnf_id+'.tar',vnf_id+'.mf']:
        try:
            os.remove(file)
        except FileNotFoundError:
            pass
    os.rmdir('VNFD')
    os.rmdir('TOSCA-Metadata')
    print(tk.messagebox.showinfo(title=None, message='Done'))
    #root.destroy()

#colors
clr_bg = '#242424'
clr_fg = '#F0F0F0'
clr_blue = '#00B0F0'
clr_orange = '#FF8C0A'
clr_gray = '#525252'
#GUI window
root = tk.Tk()
root.geometry('300x500+500+200')
root.title('VNFD Package Generator')
root.configure(bg=clr_bg)
#try this for frameless :)
#root.overrideredirect(True)

#fonts setting
f1 = tf.Font(family='Helvetica', size=9, weight='bold')
f2 = tf.Font(family='arial', size=8)
f3 = tf.Font(family='Helvetica', size=7)
#frames
frame_l1 = tk.Frame(root,bg=clr_bg)
frame_l1.pack(pady=5)

frame_e1 = tk.Frame(root)
frame_e1.pack(padx=60, pady=10,fill='x')
frame_e2 = tk.Frame(root)
frame_e2.pack(padx=60,pady=10,fill='x')

v_id = tk.StringVar()
v_type = tk.StringVar()
e_id = tk.Entry(frame_e1,width=60,bd=0,textvariable=v_id)
e_type = tk.Entry(frame_e2,width=60,bd=0,textvariable=v_type)
e_id.pack()
e_type.pack()
v_id.set('vnf id')
v_type.set('vnf type')

frame_b1 = tk.Frame(root)
frame_b1.pack(padx=60,pady=5)
frame_b2 = tk.Frame(root)
frame_b2.pack(padx=60,pady=5)
frame_b3 = tk.Frame(root)
frame_b3.pack(padx=60,pady=5)
frame_b4 = tk.Frame(root)
frame_b4.pack(padx=60,pady=5)
frame_b5 = tk.Frame(root)
frame_b5.pack(padx=60, pady=10)

#checkbutton
ck_value1 = IntVar()

cbt1 = tk.Checkbutton(frame_b4, text='auto-generate ExtCP.yaml\nbased on config.xml',variable = ck_value1,bg=clr_bg,fg=clr_fg,selectcolor=clr_bg,font=f2)
cbt1.pack(fill='x')
cbt1.select()
cbt2 = tk.Checkbutton(frame_b4, text=' load ExtCP yaml file ',variable = ck_value1,width=25,height=2,bd=0, command=load_ExtCP_yaml,bg=clr_blue,fg=clr_fg,selectcolor=clr_gray,indicatoron=False,font=f1)
cbt2.pack()

btn1 = tk.Button(frame_b1, text='1 - load  hot  yaml file',width=25,height=2,bd=0,command=load_hot_yaml,bg=clr_blue,fg=clr_fg,activeforeground=clr_bg,font=f1).pack()
btn2 = tk.Button(frame_b2, text='2 - load config xml file',width=25,height=2,bd=0,command=load_config_xml,bg=clr_blue,fg=clr_fg,font=f1).pack()
btn3 = tk.Button(frame_b3, text='3 - load Resources files',width=25,height=2, bd=0,command=load_res_dir,bg=clr_blue,fg=clr_fg,font=f1).pack()
#btn4 = tk.Button(frame_b4, text='load ExtCP yaml file(op)',width=25,height=2,bd=0, command=load_ExtCP_yaml,bg=clr_gray,fg=clr_fg).pack()
btn5 = tk.Button(frame_b5, text='Generate VNFD Package',width=25,height=2, bd=0,command=pkg_gen,bg=clr_orange,fg=clr_fg,font=f1).pack()
btn6 = tk.Button(root, text='X',width=5,height=2,bd=0, command=root.quit,bg=clr_bg,fg=clr_fg,font=f1).pack()

tk.Label(root,text='Copyright © 2020 Jeremy Li. All Rights Reserved ',bg=clr_bg,fg=clr_fg,font=f3).pack(side='bottom')

root.iconbitmap('logo.ico')
root.mainloop()